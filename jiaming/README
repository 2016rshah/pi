Due date: Wednesday 2/15/2017 @ 11:59pm

- Please remember to answer the questions in REPORT.txt

Objective:
~~~~~~~~~~

- Implement functions and invent a linkage convention

Assignment:
~~~~~~~~~~~

(1) Answer the questions in REPORT.txt

(2) Extend the language from p3

We will extend the language in several ways:

- Add support for functions. A function definition has the following syntax:

    fun <id> ( [<id> { , <id> }] ) <statement>

  Examples:

     fun hello() {
     }

     fun stuff(x,y) {
         a = x
         b = y
     }

- You need to invent and document a linkage convention.

- Add new statements:

    * return <expression>
 
        Terminates the calling function and returns the value of the expression

    * print <expression>

        Prints the value of the given expression

- Add new operators:

    * ">"  (x > y) ==> (x > y) ? 1 : 0
    * "<"  (x < y) ==> (x < y) ? 1 : 0
    * "<>" (x <> y) ==> (x == y) ? 0 : 1

- Variable scopes. We have to kinds of variables:

    * function parameters are local
    * all other variables are global
    * local parameters shadow (take precedence over) global variables

    example:

       fun f(x) {
           print x   ==> local x
           print y   ==> global y
       }

- Setting the value of a variable doesn't print it, you have to use the print
statement.

- The program entry point is the function with the name "main"

Example:
~~~~~~~~

Let's say the file tx.fun contains

fun main() {
    x = 100
    y = 200
    z = x + y
    print z
}

You can compile it (once you've finished p4) as follows 

    ./p4 < tx.fun > tx.S

or by using the Makefile

    make tx.S

The contents of tx.S (produced by your program) will be something like

    .global main
main:
    // code that produces the effects of tx.fun
    mov $0,%rax
    ret

You can now produce an executable from tx.S by

    gcc -o tx tx.S

Or by using the Makefile

    make tx

You can run tx by hand

    ./tx

And it should produce the output

    300

Files
~~~~~

p4.c      The compiler source (to be completed by you)
p4        The compiler executable (generated by "make p4")

For each test "tx"

tx.fun   the source program
tx.S      the equivalent x86-64 assembly program (generated by p4)
tx        the compiled program (generated by the Makefile)
tx.out    output produced by running tx
tx.ok     the expected output
tx.diff   the difference between tx.out tx.ok

Make targets:
~~~~~~~~~~~~~

make           # compile the compiler
make tx.S      # run the compiler on tx.fun and produce the x86-64 assembly
make tx        # run the compiler on tx.fun and produce the x86-64 executable
make tx.out    # run the compiled program and produce its output
make tx.diff   # produce the difference between tx.out and tx.ok
make tx.result # produce a summary of the result of running tx

make progs     # compile all the tests
make outs      # produce all the out files
make diffs     # produce all the diff files
make test      # produce summary output for all tests

Files you're allowed to change:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   p4.c

You can also add your own tests by creating a pair of
files (for example tz.fun and tx.ok)

To debug with gdb
~~~~~~~~~~~~~~~~~

    make
    gdb ./p4
    (gdb) run
    <<type your program>>
    <<terminate programing with ^D (pressing control and D together)

or

    gdb ./p4
    (gdb) run < t5.fun
