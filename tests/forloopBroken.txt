    .text
    .global main
main:
    sub $8,%rsp
    rdtsc
    shr $32,%rdx
    or %rdx,%rax
    mov %rax,rand_seed
    call global_0
    call main_fun
    mov $0,%rax
    add $8,%rsp
    ret
//STANDARD FUNCTIONS BLOCK
drawrect_fun:
    pushq %r8
    movq 16(%rsp), %rdi
    movq 24(%rsp), %rsi
    movq 32(%rsp), %rdx
    movq 40(%rsp), %rcx
    call bg_drawrect
    popq %r8
    ret
setcolor_fun:
    push %r8
    movq 16(%rsp), %rdi
    movq 24(%rsp), %rsi
    movq 32(%rsp), %rdx
    call bg_setcolor
    pop %r8
    ret
startpolygon_fun:
    push %r8
    call bg_startpolygon
    pop %r8
    ret
addpoint_fun:
    push %r8
    movq 16(%rsp), %rdi
    movq 24(%rsp), %rsi
    call bg_addpoint
    pop %r8
    ret
endpolygon_fun:
    push %r8
    call bg_endpolygon
    pop %r8
    ret
drawngon_fun:
    push %r8
    movq 16(%rsp), %rdi
    movq 24(%rsp), %rsi
    movq 32(%rsp), %rdx
    movq 40(%rsp), %rcx
    call bg_drawngon
    pop %r8
    ret
random_fun:
    mov rand_seed,%rax
    mov %rax,%rdi
    shl $21,%rdi
    xor %rdi,%rax
    mov %rax,%rdi
    shr $35,%rdi
    xor %rdi,%rax
    mov %rax,%rdi
    shl $4,%rdi
    xor %rdi,%rax
    mov %rax,rand_seed
    ret
getchar_fun:
    push %r8
    call getchar
    movslq %eax, %rax
    pop %r8
    ret
printchar_fun:
    push %r8
    mov $output_format_char, %rdi
    mov 16(%rsp), %rsi
    call printf
    pop %r8
    ret
//END STANDARD FUNCTIONS BLOCK
main_fun:
    push %rbp
    mov %rsp,%rbp
    sub $16,%rsp
    push %r8
    push %r9
    push %r12
    push %r13
    push %r14
    push %r15
    push %rbx
    sub $8,%rsp
    mov $1,%r12
    mov %r12,%r13
    mov %r13,%r14
    mov %r14,%r15
    mov %r15,%rbx
    mov %rbx,%rax
    add $8,%rsp
    pop %rbx
    pop %r15
    pop %r14
    pop %r13
    pop %r12
    mov %rax,-8(%rbp)
    pop %r9
    pop %r8
for_begin_0:
    push %r12
    push %r13
    push %r14
    push %r15
    push %rbx
    sub $8,%rsp
    push %r12
    push %r13
    push %r14
    push %r15
    push %rbx
    sub $8,%rsp
    mov -8(%rbp),%rax
    mov %rax,%r12
    mov %r12,%r13
    mov %r13,%r14
    mov %r14,%r15
    mov $5,%r12
    mov %r12,%r13
    mov %r13,%r14
    cmp %r14,%r15
    setb %r15b
    movzbq %r15b,%r15
    mov %r15,%rbx
    mov %rbx,%rax
    add $8,%rsp
    pop %rbx
    pop %r15
    pop %r14
    pop %r13
    pop %r12
    mov %rax,%r12
    mov %r12,%r13
    mov %r13,%r14
    mov %r14,%r15
    mov %r15,%rbx
    mov %rbx,%rax
    add $8,%rsp
    pop %rbx
    pop %r15
    pop %r14
    pop %r13
    pop %r12
    test %rax,%rax
    jz for_end_0
    jmp for_code_0
for_inc_0:
    push %r8
    push %r9
    push %r12
    push %r13
    push %r14
    push %r15
    push %rbx
    sub $8,%rsp
    mov -8(%rbp),%rax
    mov %rax,%r12
    mov %r12,%r13
    mov %r13,%r14
    mov $1,%r12
    mov %r12,%r13
    add %r13,%r14
    mov %r14,%r15
    mov %r15,%rbx
    mov %rbx,%rax
    add $8,%rsp
    pop %rbx
    pop %r15
    pop %r14
    pop %r13
    pop %r12
    mov %rax,-8(%rbp)
    pop %r9
    pop %r8
    jmp for_begin_0
for_code_0:
    push %r12
    push %r13
    push %r14
    push %r15
    push %rbx
    sub $8,%rsp
    mov -8(%rbp),%rax
    mov %rax,%r12
    mov %r12,%r13
    mov %r13,%r14
    mov %r14,%r15
    mov %r15,%rbx
    mov %rbx,%rax
    add $8,%rsp
    pop %rbx
    pop %r15
    pop %r14
    pop %r13
    pop %r12
    mov $output_format,%rdi
    mov %rax,%rsi
    call printf
    lea -16(%rbp),%rsp
    lea 0(%rbp),%rsp
    jmp for_inc_0
for_end_0:
    lea 0(%rbp),%rsp
main_end:
    lea 0(%rbp),%rsp
    pop %rbp
    ret
    global_0:
    ret
    .data
output_format:
    .string "%lu\n"
output_format_char:
    .string "%c"
bell_format:
    .string ""
ineedazero:
    .quad 0
windowtitle:
    .string "Potato, the Epic Window"
rbp_store:
    .quad 0
rand_seed:
    .quad 10
